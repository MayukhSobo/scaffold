name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: 1.24.4
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..$TAG_NAME >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "First release of Scaffold - High-Performance Go Application Boilerplate" >> CHANGELOG.md
        fi
        
        # Set output for use in release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create checksums
      run: |
        cd build
        find . -type f -name "scaffold*" -exec sha256sum {} \; > ../checksums.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          build/linux/scaffold-amd64-linux
          build/darwin/scaffold-amd64-darwin
          build/windows/scaffold-amd64-windows.exe
          checksums.txt
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
        echo "üê≥ Docker image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}"
        echo "üì¶ Binaries available in GitHub Releases"

    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        exit 1 