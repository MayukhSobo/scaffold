version: "3"

vars:
  REGISTRY: ghcr.io
  IMAGE_NAME: "{{.REGISTRY}}/{{.DOCKER_IMAGE_NAME}}"
  PLATFORMS: "linux/amd64,linux/arm64"

tasks:
  # Basic Docker tasks
  build:
    desc: Build Docker image (single platform)
    silent: true
    cmds:
    - docker build -t {{.DOCKER_IMAGE_NAME}}:{{.VERSION}} .
    - echo "Docker image built - {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}"

  build:multi:
    desc: Build Docker image for multiple platforms (like CI)
    silent: true
    cmds:
    - docker buildx create --use --name multi-builder 2>/dev/null || docker buildx use multi-builder
    - docker buildx build --platform {{.PLATFORMS}} -t {{.IMAGE_NAME}}:{{.VERSION}} -t {{.IMAGE_NAME}}:latest .
    - echo "Multi-platform Docker image built - {{.IMAGE_NAME}}:{{.VERSION}}"

  build:ci:
    desc: Build Docker image exactly like CI (with buildx and cache)
    silent: true
    cmds:
    - docker buildx create --use --name ci-builder 2>/dev/null || docker buildx use ci-builder
    - |
      docker buildx build \
        --platform {{.PLATFORMS}} \
        --cache-from type=local,src=/tmp/.buildx-cache \
        --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
        -t {{.IMAGE_NAME}}:{{.VERSION}} \
        -t {{.IMAGE_NAME}}:latest \
        --load .
    - rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache 2>/dev/null || true
    - echo "CI-style Docker image built - {{.IMAGE_NAME}}:{{.VERSION}}"

  run:
    desc: Run Docker container
    silent: true
    cmds:
    - docker run --rm -p 8080:8080 --name {{.DOCKER_IMAGE_NAME}}-dev {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}

  run:detached:
    desc: Run Docker container in background
    silent: true
    cmds:
    - docker run -d -p 8080:8080 --name {{.DOCKER_IMAGE_NAME}}-dev {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}
    - echo "Docker container started in background - {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}"

  test:
    desc: Test Docker image (like CI)
    silent: true
    cmds:
    - echo "Testing Docker image..."
    - docker run --rm -d --name test-container -p 8081:8080 {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}
    - sleep 5
    - echo "Container started successfully"
    - docker stop test-container
    - echo "Docker image test completed successfully"

  scan:
    desc: Run Trivy vulnerability scanner (like CI)
    silent: true
    cmds:
    - echo "Scanning Docker image for vulnerabilities..."
    - trivy image --format table {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}
    - echo "Vulnerability scan completed"

  scan:sarif:
    desc: Run Trivy vulnerability scanner with SARIF output (like CI)
    silent: true
    cmds:
    - mkdir -p reports
    - echo "Scanning Docker image for vulnerabilities (SARIF output)..."
    - trivy image --format sarif --output reports/trivy-results.sarif {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}
    - echo "Vulnerability scan completed - results saved to reports/trivy-results.sarif"

  push:
    desc: Push Docker image to registry
    silent: true
    cmds:
    - docker push {{.IMAGE_NAME}}:{{.VERSION}}
    - docker push {{.IMAGE_NAME}}:latest
    - echo "Docker image pushed - {{.IMAGE_NAME}}:{{.VERSION}}"

  login:
    desc: Login to GitHub Container Registry
    silent: true
    cmds:
    - echo "Logging into GitHub Container Registry..."
    - echo "Please provide your GitHub Personal Access Token with packages:write permission"
    - docker login {{.REGISTRY}} -u $GITHUB_USERNAME
    - echo "Successfully logged into {{.REGISTRY}}"

  # CI-like workflow
  ci:
    desc: Run complete Docker CI workflow locally
    silent: true
    cmds:
    - task: build:ci
    - task: test
    - task: scan
    - echo "Complete Docker CI workflow completed successfully"

  # Cleanup tasks
  clean:
    desc: Remove Docker image
    silent: true
    cmds:
    - docker rmi {{.DOCKER_IMAGE_NAME}}:{{.VERSION}} 2>/dev/null || echo "Image not found - {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}"
    - echo "Docker image cleanup completed"

  clean:all:
    desc: Remove all unused Docker images, containers, and networks
    silent: true
    cmds:
    - docker system prune -f
    - echo "Docker system cleanup completed"

  clean:buildx:
    desc: Clean buildx cache and builders
    silent: true
    cmds:
    - docker buildx prune -f
    - docker buildx rm multi-builder 2>/dev/null || true
    - docker buildx rm ci-builder 2>/dev/null || true
    - rm -rf /tmp/.buildx-cache 2>/dev/null || true
    - echo "Buildx cleanup completed"

  # Utility tasks
  logs:
    desc: Show logs from running container
    silent: true
    cmds:
    - docker logs $(docker ps -q --filter ancestor={{.DOCKER_IMAGE_NAME}}:{{.VERSION}}) 2>/dev/null || echo "No running containers found"

  stop:
    desc: Stop running container
    silent: true
    cmds:
    - docker stop $(docker ps -q --filter ancestor={{.DOCKER_IMAGE_NAME}}:{{.VERSION}}) 2>/dev/null || echo "No running containers found"
    - echo "Container stopped"

  inspect:
    desc: Inspect Docker image
    silent: true
    cmds:
    - docker inspect {{.DOCKER_IMAGE_NAME}}:{{.VERSION}}

  # Docker Compose tasks for development
  # All tasks automatically sync with configs/docker.yml - just change the config and run the task!
  
  compose:config:
    desc: Show current Docker Compose configuration from configs/docker.yml
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - echo "Current Docker Compose Configuration (from configs/docker.yml):"
    - python scripts/docker/docker-compose-env.py configs/docker.yml --format env 2>/dev/null || echo "Error reading configuration"

  compose:sync:
    desc: Sync configuration files from configs/docker.yml (internal task)
    internal: true
    silent: true
    deps: [":shared:venv:ensure"]
    sources:
      - configs/docker.yml
    generates:
      - docker-compose.yml
      - .env
      - db/mysql-init.sql
    cmds:
    - echo "ðŸ”„ Syncing Docker Compose with configs/docker.yml..."
    - python scripts/docker/generate-docker-compose.py configs/docker.yml --output docker-compose.yml 2>/dev/null
    - python scripts/docker/docker-compose-env.py configs/docker.yml --format compose > .env 2>/dev/null
    - python scripts/database/generate-mysql-init.py configs/docker.yml 2>/dev/null
    - echo "âœ… Configuration synced from configs/docker.yml"

  compose:up:
    desc: Start all services with docker-compose (automatically syncs configs/docker.yml)
    silent: true
    deps: [compose:sync]
    cmds:
    - docker-compose up -d
    - echo "All services started"
    - task: _show_service_urls

  compose:down:
    desc: Stop all services with docker-compose
    silent: true
    cmds:
    - docker-compose down -v
    - echo "All services stopped"

  compose:build:
    desc: Build Docker images and generate configuration files (automatically syncs configs/docker.yml)
    silent: true
    deps: [compose:sync]
    cmds:
    - docker-compose build
    - echo "Docker images built successfully"

  compose:logs:
    desc: View logs from all services (use -f to follow)
    silent: true
    vars:
      FLAGS: '{{default "" .CLI_ARGS}}'
    cmds:
    - docker-compose logs {{.FLAGS}}

  compose:logs:app:
    desc: View logs from app service only (use -f to follow)
    silent: true
    deps: [":shared:venv:ensure"]
    vars:
      FLAGS: '{{default "" .CLI_ARGS}}'
    cmds:
    - |
      APP_HOST=$(python scripts/docker/docker-compose-env.py configs/docker.yml --format env | grep "^HTTP_HOST=" | cut -d'=' -f2)
      docker-compose logs {{.FLAGS}} "$APP_HOST"

  compose:restart:
    desc: Restart all services (automatically syncs configs/docker.yml)
    silent: true
    deps: [compose:sync]
    cmds:
    - docker-compose restart
    - echo "All services restarted"

  compose:mysql:
    desc: Connect to MySQL database using dynamic configuration
    aliases: [db:shell]
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - |
      DB_CONFIG=$(python scripts/docker/docker-compose-env.py configs/docker.yml --format env)
      DB_SERVICE=$(echo "$DB_CONFIG" | grep "^DB_HOST=" | cut -d'=' -f2)
      DB_USER=$(echo "$DB_CONFIG" | grep "^DB_USER=" | cut -d'=' -f2)
      DB_PASSWORD=$(echo "$DB_CONFIG" | grep "^DB_PASSWORD=" | cut -d'=' -f2)
      
      echo "ðŸ”— Connecting to MySQL database..."
      echo "Service: $DB_SERVICE | User: $DB_USER"
      docker-compose exec "$DB_SERVICE" mysql -u "$DB_USER" -p"$DB_PASSWORD"

  compose:adminer:
    desc: Open Adminer in browser with MySQL credentials from configuration
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - |
      DB_CONFIG=$(python scripts/docker/docker-compose-env.py configs/docker.yml --format env)
      DB_USER=$(echo "$DB_CONFIG" | grep "^DB_USER=" | cut -d'=' -f2)
      DB_PASSWORD=$(echo "$DB_CONFIG" | grep "^DB_PASSWORD=" | cut -d'=' -f2)
      DB_DATABASE=$(echo "$DB_CONFIG" | grep "^DB_DATABASE=" | cut -d'=' -f2)
      ADMINER_PORT=$(echo "$DB_CONFIG" | grep "^ADMINER_PORT=" | cut -d'=' -f2)
      
      echo "Opening Adminer at localhost:${ADMINER_PORT} with MySQL credentials from configs/docker.yml"
      URL="http://localhost:${ADMINER_PORT}/?server=mysql&username=$DB_USER&password=$DB_PASSWORD&db=$DB_DATABASE"
      if command -v open &> /dev/null; then
        open "$URL"
      elif command -v xdg-open &> /dev/null; then
        xdg-open "$URL"
      else
        echo "Please open $URL in your browser"
      fi

  compose:status:
    desc: Show status of all services
    silent: true
    cmds:
    - docker-compose ps

  # Internal helper tasks
  _show_service_urls:
    desc: Show service URLs (internal task)
    internal: true
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - |
      # Read configuration and display correct URLs
      CONFIG=$(python scripts/docker/docker-compose-env.py configs/docker.yml --format env)
      APP_PORT=$(echo "$CONFIG" | grep "^HTTP_PORT=" | cut -d'=' -f2)
      ADMINER_PORT=$(echo "$CONFIG" | grep "^ADMINER_PORT=" | cut -d'=' -f2)
      APP_HOST=$(echo "$CONFIG" | grep "^HTTP_HOST=" | cut -d'=' -f2)
      DB_PORT=$(echo "$CONFIG" | grep "^DB_PORT=" | cut -d'=' -f2)
      
      echo "${APP_HOST^} available at http://localhost:${APP_PORT}"
      echo "Adminer available at http://localhost:${ADMINER_PORT}"
      echo "MySQL available at localhost:${DB_PORT}"
