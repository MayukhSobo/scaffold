version: "3"

tasks:
  # Test tasks
  all:
    desc: Run all tests
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - gotestsum --format=testname -- {{.TEST_DIRS}}

  unit:
    desc: Run unit tests only
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - gotestsum --format=testname -- -short {{.TEST_DIRS}}

  integration:
    desc: Run integration tests only
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - gotestsum --format=testname -- -run Integration {{.TEST_DIRS}}

  coverage:
    desc: Run tests with coverage report
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - mkdir -p {{.COVERAGE_DIR}}
    - gotestsum --format=testname -- -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic {{.TEST_DIRS}}
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
    - echo "Coverage report generated at {{.COVERAGE_DIR}}/coverage.html"

  coverage:open:
    desc: Generate comprehensive coverage reports and open in browser
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - mkdir -p {{.COVERAGE_DIR}}
    - gotestsum --format=testname -- -coverprofile={{.COVERAGE_DIR}}/coverage.out -covermode=atomic {{.TEST_DIRS}}
    - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
    - gocov convert {{.COVERAGE_DIR}}/coverage.out | gocov-html > {{.COVERAGE_DIR}}/coverage-enhanced.html 2>/dev/null || echo "Enhanced coverage skipped"
    - go-cover-treemap -coverprofile={{.COVERAGE_DIR}}/coverage.out > {{.COVERAGE_DIR}}/coverage-treemap.svg 2>/dev/null || echo "Treemap coverage skipped"
    - |
      cd {{.COVERAGE_DIR}} && python3 -m http.server 8080 > /dev/null 2>&1 &
      HTTP_PID=$!
      echo "Coverage server started at http://localhost:8080"
      echo "Available reports:"
      echo "  â€¢ Standard: http://localhost:8080/coverage.html"
      echo "  â€¢ Enhanced: http://localhost:8080/coverage-enhanced.html (gocov + gocov-html)"
      echo "  â€¢ Treemap: http://localhost:8080/coverage-treemap.svg (visual treemap)"
      echo ""
      echo "Press Ctrl+C to stop the server"
      sleep 2
      if command -v open &> /dev/null; then
        open http://localhost:8080
      elif command -v xdg-open &> /dev/null; then
        xdg-open http://localhost:8080
      fi
      wait $HTTP_PID

  race:
    desc: Run tests with race detection
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - gotestsum --format=testname -- -race {{.TEST_DIRS}}

  benchmark:
    desc: Run benchmark tests
    deps: [ ":db:generate-sqlc" ]
    silent: true
    cmds:
    - gotestsum --format=testname -- -bench=. -benchmem {{.TEST_DIRS}}

  # Database connection tests (no dependency on sqlc generation since they're unit tests)
  db:local:
    desc: Run database connection tests for local environment
    silent: true
    cmds:
    - echo "ðŸ§ª Running database connection tests for local environment..."
    - gotestsum --format=testname -- -v ./pkg/db -run "TestWithActualLocalConfigFile|TestParseConfigLocalEnvironment|TestBuildDSNLocalEnvironment|TestNewConnectionLocalInvalidConfig"

  db:docker:
    desc: Run database connection tests for Docker environment
    silent: true
    cmds:
    - echo "ðŸ§ª Running database connection tests for Docker environment..."
    - gotestsum --format=testname -- -v ./pkg/db -run "TestWithActualDockerConfigFile|TestWithActualDockerConfigFileConnection|TestParseConfigDockerEnvironment|TestBuildDSNDockerEnvironment|TestNewConnectionDockerInvalidConfig|TestNewConnectionDockerRealConfig"

  db:all:
    desc: Run all database connection tests (local, docker, and generic)
    silent: true
    cmds:
    - echo "ðŸ§ª Running all database connection tests..."
    - gotestsum --format=testname -- -v ./pkg/db 