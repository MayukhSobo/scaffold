version: "3"

tasks:
  # Dependency management
  install:
    desc: Install all project dependencies (Go modules and tools)
    silent: true
    deps: [install:go, install:tools]
    cmds:
    - echo "✅ All dependencies installed successfully."

  install:go:
    desc: Install/update Go module dependencies
    internal: true
    silent: true
    cmds:
    - go mod download
    - go mod tidy
    - echo "Dependencies installed"

  install:tools:
    desc: Install all development tools
    internal: true
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - echo "📦 Installing development tools..."
    - python scripts/run.py install-tools
    - go install github.com/pressly/goose/v3/cmd/goose@{{.GOOSE_VERSION}}
    - go install golang.org/x/tools/cmd/goimports@{{.GOIMPORTS_VERSION}}
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.GOLANGCILINT_VERSION}}
    - go install github.com/sqlc-dev/sqlc/cmd/sqlc@{{.SQLC_VERSION}}

  update:
    desc: Update all dependencies to latest versions
    silent: true
    cmds:
    - go get -u ./...
    - go mod tidy
    - echo "Dependencies updated to latest versions"

  patch:
    desc: Update dependencies to latest patch versions only
    silent: true
    cmds:
    - go get -u=patch ./...
    - go mod tidy
    - echo "Dependencies updated to latest patch versions"

  verify:
    desc: Verify Go modules and tool versions
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - echo "➡️  Verifying Go module checksums..."
    - go mod verify
    - echo "➡️  Verifying installed tool versions against versions.yml..."
    - python scripts/run.py verify-tool-versions

  vendor:
    desc: Make vendored copy of dependencies
    silent: true
    cmds:
    - go mod vendor
    - echo "Dependencies vendored to vendor/ directory"

  clean:vendor:
    desc: Remove vendor directory
    silent: true
    cmds:
    - rm -rf vendor
    - echo "Vendor directory removed"

  clean:cache:
    desc: Clean the module download cache
    silent: true
    cmds:
    - go clean -testcache
    - go clean -fuzzcache
    - go clean -modcache
    - go clean -cache
    - echo "Module cache cleaned"

  clean:all:
    desc: Clean all caches and temporary files with deep level cleaning
    deps: [clean:cache, clean:vendor, ":shared:venv:ensure"]
    silent: true
    cmds:
    - echo "🧹 Starting deep cleaning of Go caches and dependencies..."
    - echo "✅ Standard Go caches cleaned"
    - echo "🔍 Performing deep level cleaning of cached Go modules..."
    - python scripts/remove_go_mod_deps.py
    - echo "✅ Deep level cleaning completed - all Go caches and cached modules cleaned"

  outdated:
    desc: Check for outdated Go modules and tools
    silent: true
    deps: [":shared:venv:ensure"]
    cmds:
    - echo "➡️  Checking for outdated Go modules..."
    - |
      go list -u -m all | grep -E '\[.*\]' || echo "✅ All Go modules are up to date"
    - echo "➡️  Checking for outdated development tools..."
    - python scripts/run.py verify-tool-versions --check-outdated

  vulnerabilities:
    desc: Check for security vulnerabilities in dependencies
    silent: true
    cmds:
    - echo "Checking for security vulnerabilities..."
    - govulncheck ./...

  licenses:
    desc: Check licenses of dependencies
    silent: true
    cmds:
    - |
      echo "Checking dependency licenses..."
      echo "License,Package,Version" > licenses.csv
      go list -m all | while read -r line; do
        if [[ "$line" =~ ^([^[:space:]]+)[[:space:]]+(.+)$ ]]; then
          package="${BASH_REMATCH[1]}"
          version="${BASH_REMATCH[2]}"
          # Simple license detection - you might want to use a more sophisticated tool
          if [[ "$package" != "$(go list -m)" ]]; then
            echo "Unknown,$package,$version" >> licenses.csv
          fi
        fi
      done
      echo "License report generated at licenses.csv"
      echo "Note: This is a basic license check. Consider using tools like 'go-licenses' for more accurate detection."

# Version management tasks
version:show:
  desc: Show all current versions from versions.yml
  silent: true
  deps: [":shared:venv:ensure"]
  cmds:
  - python scripts/run.py version-helper list

version:sync:
  desc: Sync versions from versions.yml to all files
  silent: true
  deps: [":shared:venv:ensure"]
  cmds:
  - python scripts/run.py sync-versions
  - echo "✅ Versions synchronized"

version:sync:dry-run:
  desc: Show what would be changed by version sync
  silent: true
  deps: [":shared:venv:ensure"]
  cmds:
  - python scripts/run.py sync-versions --dry-run

version:check:
  desc: Check version consistency across all files and verify actual tool versions
  silent: true
  deps: [":shared:venv:ensure"]
  cmds:
  - echo "📄 Checking file-based versions..."
  - python scripts/run.py sync-versions --check
  - echo "🔧 Checking actual tool versions..."
  - python scripts/run.py verify-tool-versions
  - echo "✅ Version consistency checked"

version:fix:
  desc: Auto-install correct tool versions to match versions.yml
  silent: true
  deps: [":shared:venv:ensure"]
  cmds:
  - echo "🔧 Auto-installing correct tool versions to match versions.yml..."
  - python scripts/run.py verify-tool-versions --fix
  - echo "✅ Tools installed with correct versions" 