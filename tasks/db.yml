version: "3"

# Database Migration Tasks
# 
# This task file provides database migration capabilities with dynamic configuration
# reading from YAML configuration files. All database connection parameters are
# read from the configuration files, ensuring consistency across environments.
#
# Configuration Structure:
#   db:
#     mysql:
#       host: [hostname]
#       port: [port_number]
#       user: [username]
#       password: [password]
#       database: [database_name]
#
# Available Tasks:
#   - db:config:info              - Show current database configuration
#   - db:config:test              - Test database connectivity
#   - db:shell                    - Connect to database shell (uses configs/local.yml)
#   - db:migrate:status           - Show migration status (uses configs/local.yml)
#   - db:migrate:up               - Apply migrations (uses configs/local.yml)
#   - db:migrate:down             - Rollback last migration (uses configs/local.yml)
#   - db:migrate:docker:status    - Show migration status (uses configs/docker.yml)
#   - db:migrate:docker:up        - Apply migrations in Docker (uses configs/docker.yml)
#   - db:migrate:custom:status    - Show migration status with custom config
#   - db:migrate:custom:up        - Apply migrations with custom config
#
# Custom Configuration Usage:
#   CONFIG_FILE=configs/prod.yml task db:migrate:custom:status
#   CONFIG_FILE=configs/prod.yml task db:migrate:custom:up
#   CONFIG_FILE=configs/docker.yml task db:shell
#
# When you change any configuration in the YAML files (host, port, user, etc.),
# the changes are automatically reflected in all migration tasks.

vars:
  MIGRATIONS_DIR: "migrations"
  
  # Default configuration files
  CONFIG_FILE: "configs/local.yml"
  DOCKER_CONFIG_FILE: "configs/docker.yml"
  
  # Dynamic DSN generation from config files
  DB_DSN:
    sh: |
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      python scripts/database/db-config.py ${CONFIG_FILE:-configs/local.yml} 2>/dev/null || echo "scaffold:123456@tcp(localhost:3306)/user?charset=utf8mb4&parseTime=True&loc=Local"
  
  DB_DSN_DOCKER:
    sh: |
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      # For Docker migrations from host, we need to use localhost instead of mysql hostname
      DSN=$(python scripts/database/db-config.py ${DOCKER_CONFIG_FILE:-configs/docker.yml} 2>/dev/null || echo "scaffold:123456@tcp(mysql:3306)/user?charset=utf8mb4&parseTime=True&loc=Local")
      echo "$DSN" | sed 's/@tcp(mysql:/@tcp(localhost:/'

tasks:
  # Configuration tasks
  config:info:
    desc: Show current database configuration
    silent: true
    cmds:
    - echo "Local Config ({{.CONFIG_FILE}}):"
    - |
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      python scripts/database/db-config.py {{.CONFIG_FILE}} --format env || echo "Failed to read local config"
    - echo ""
    - echo "Docker Config ({{.DOCKER_CONFIG_FILE}}):"
    - |
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      python scripts/database/db-config.py {{.DOCKER_CONFIG_FILE}} --format env || echo "Failed to read Docker config"

  config:test:
    desc: Test database connectivity using current configuration
    silent: true
    cmds:
    - echo "Testing local database connection..."
    - |
      if command -v mysql >/dev/null 2>&1; then
        DSN="{{.DB_DSN}}"
        # Extract connection details for mysql client
        USER=$(echo "$DSN" | sed -n 's/.*\([^:]*\):[^@]*@.*/\1/p')
        PASS=$(echo "$DSN" | sed -n 's/.*[^:]*:\([^@]*\)@.*/\1/p')
        HOST=$(echo "$DSN" | sed -n 's/.*@tcp(\([^:]*\):.*/\1/p')
        PORT=$(echo "$DSN" | sed -n 's/.*@tcp([^:]*:\([^)]*\)).*/\1/p')
        DB=$(echo "$DSN" | sed -n 's/.*\/\([^?]*\).*/\1/p')
        
        if mysql -h "$HOST" -P "$PORT" -u "$USER" -p"$PASS" -e "SELECT 1" "$DB" >/dev/null 2>&1; then
          echo "✓ Local database connection successful"
        else
          echo "✗ Local database connection failed"
        fi
      else
        echo "MySQL client not found, skipping connection test"
      fi

  shell:
    desc: Connect to database shell using local configuration
    silent: true
    cmds:
    - |
      CONFIG_FILE=${CONFIG_FILE:-configs/local.yml}
      echo "Using config file: $CONFIG_FILE"
      
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      
      # Get database configuration
      DB_CONFIG=$(python scripts/database/db-config.py "$CONFIG_FILE" --format env 2>/dev/null)
      if [ $? -ne 0 ]; then
        echo "❌ Failed to read database configuration from $CONFIG_FILE"
        exit 1
      fi
      
      DB_HOST=$(echo "$DB_CONFIG" | grep "^DB_HOST=" | cut -d'=' -f2)
      DB_PORT=$(echo "$DB_CONFIG" | grep "^DB_PORT=" | cut -d'=' -f2)
      DB_USER=$(echo "$DB_CONFIG" | grep "^DB_USER=" | cut -d'=' -f2)
      DB_PASSWORD=$(echo "$DB_CONFIG" | grep "^DB_PASSWORD=" | cut -d'=' -f2)
      DB_DATABASE=$(echo "$DB_CONFIG" | grep "^DB_DATABASE=" | cut -d'=' -f2)
      
      echo "🔗 Connecting to MySQL database..."
      echo "Host: $DB_HOST:$DB_PORT | Database: $DB_DATABASE | User: $DB_USER"
      echo "Configuration: $CONFIG_FILE"
      echo ""
      
      # Check if connecting to localhost and if MySQL container is running
      if [ "$DB_HOST" = "127.0.0.1" ] || [ "$DB_HOST" = "localhost" ]; then
        if docker ps --format "{{.Names}}" | grep -q "scaffold-mysql"; then
          echo "🐳 Using Docker MySQL client for localhost connection..."
          docker exec -it scaffold-mysql mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" "$DB_DATABASE"
        else
          echo "❌ MySQL container not running. Start it with: docker-compose up -d mysql"
          echo "   Or install proper MySQL client (not MariaDB) to connect directly."
          exit 1
        fi
      else
        # For remote connections, use host MySQL client
        if ! command -v mysql >/dev/null 2>&1; then
          echo "❌ MySQL client not found. Please install mysql-client:"
          echo "  Ubuntu/Debian: apt-get install mysql-client"
          echo "  macOS: brew install mysql-client"
          exit 1
        fi
        mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" "$DB_DATABASE"
      fi

  generate-sqlc:
    desc: "Generate SQLC queries"
    cmds:
      - sqlc generate

  # Custom config file support
  # Usage: CONFIG_FILE=configs/prod.yml task db:migrate:custom:status
  migrate:custom:status:
    desc: Show migration status using custom config file (set CONFIG_FILE env var)
    silent: true
    cmds:
    - |
      CONFIG_FILE=${CONFIG_FILE:-configs/local.yml}
      echo "Using config file: $CONFIG_FILE"
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      DSN=$(python scripts/database/db-config.py "$CONFIG_FILE")
      goose -dir {{.MIGRATIONS_DIR}} mysql "$DSN" status

  migrate:custom:up:
    desc: Run migrations using custom config file (set CONFIG_FILE env var)
    silent: true
    cmds:
    - |
      CONFIG_FILE=${CONFIG_FILE:-configs/local.yml}
      echo "Using config file: $CONFIG_FILE"
      if [ -d ".venv" ]; then
        # Activate virtual environment
        SHELL_NAME=$(basename "$SHELL")
        case "$SHELL_NAME" in
          "fish")
            [ -f ".venv/bin/activate.fish" ] && source .venv/bin/activate.fish 2>/dev/null || source .venv/bin/activate
            ;;
          "csh" | "tcsh")
            [ -f ".venv/bin/activate.csh" ] && source .venv/bin/activate.csh || source .venv/bin/activate
            ;;
          *)
            source .venv/bin/activate
            ;;
        esac
      fi
      DSN=$(python scripts/database/db-config.py "$CONFIG_FILE")
      goose -dir {{.MIGRATIONS_DIR}} mysql "$DSN" up
      echo "Migrations applied successfully using $CONFIG_FILE"

  # Migration tasks
  migrate:up:
    desc: Run database migrations (up)
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN}}" up
    - echo "Migrations applied successfully"

  migrate:down:
    desc: Rollback last migration
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN}}" down
    - echo "Migration rolled back successfully"

  migrate:status:
    desc: Show migration status
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN}}" status

  migrate:create:
    desc: Create a new migration file
    silent: true
    cmds:
    - |
      if [ -z "{{.CLI_ARGS}}" ]; then
        echo "Usage: task db:migrate:create -- migration_name"
        echo "Example: task db:migrate:create -- create_posts_table"
        exit 1
      fi
    - goose -dir {{.MIGRATIONS_DIR}} create {{.CLI_ARGS}} sql
    - echo "Migration created successfully"

  migrate:reset:
    desc: Reset database (down all migrations)
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN}}" reset
    - echo "Database reset successfully"

  migrate:version:
    desc: Show current migration version
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN}}" version

  # Docker-specific migration tasks
  migrate:docker:up:
    desc: Run database migrations against Docker MySQL
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN_DOCKER}}" up
    - echo "Docker migrations applied successfully"

  migrate:docker:down:
    desc: Rollback last migration against Docker MySQL
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN_DOCKER}}" down
    - echo "Docker migration rolled back successfully"

  migrate:docker:status:
    desc: Show migration status against Docker MySQL
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN_DOCKER}}" status

  migrate:docker:reset:
    desc: Reset database against Docker MySQL
    silent: true
    cmds:
    - goose -dir {{.MIGRATIONS_DIR}} mysql "{{.DB_DSN_DOCKER}}" reset
    - echo "Docker database reset successfully" 