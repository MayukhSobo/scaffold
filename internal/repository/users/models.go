// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package users

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type UsersRole string

const (
	UsersRoleUser      UsersRole = "user"
	UsersRoleAdmin     UsersRole = "admin"
	UsersRoleModerator UsersRole = "moderator"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type UsersStatus string

const (
	UsersStatusActive              UsersStatus = "active"
	UsersStatusInactive            UsersStatus = "inactive"
	UsersStatusSuspended           UsersStatus = "suspended"
	UsersStatusPendingVerification UsersStatus = "pending_verification"
)

func (e *UsersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersStatus(s)
	case string:
		*e = UsersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersStatus: %T", src)
	}
	return nil
}

type NullUsersStatus struct {
	UsersStatus UsersStatus `json:"users_status"`
	Valid       bool        `json:"valid"` // Valid is true if UsersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UsersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersStatus), nil
}

type User struct {
	ID                uint64         `json:"id"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	PasswordHash      string         `json:"password_hash"`
	FirstName         sql.NullString `json:"first_name"`
	LastName          sql.NullString `json:"last_name"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	Bio               sql.NullString `json:"bio"`
	PhoneNumber       sql.NullString `json:"phone_number"`
	AddressStreet     sql.NullString `json:"address_street"`
	AddressCity       sql.NullString `json:"address_city"`
	AddressState      sql.NullString `json:"address_state"`
	AddressPostalCode sql.NullString `json:"address_postal_code"`
	AddressCountry    sql.NullString `json:"address_country"`
	Status            UsersStatus    `json:"status"`
	Role              UsersRole      `json:"role"`
	EmailVerifiedAt   sql.NullTime   `json:"email_verified_at"`
	LastLoginAt       sql.NullTime   `json:"last_login_at"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	DeletedAt         sql.NullTime   `json:"deleted_at"`
}
